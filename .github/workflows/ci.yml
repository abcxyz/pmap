# Copyright 2023 The Authors (see AUTHORS file)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'ci'

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
  workflow_dispatch:
  workflow_call:

env:
  WIF_PROVIDER: 'projects/125781045617/locations/global/workloadIdentityPools/github-automation/providers/pmap-ci-i'
  WIF_SERVICE_ACCOUNT: 'github-automation-bot@gha-pmap-ci-i-f49bd9.iam.gserviceaccount.com'
  DOCKER_REGISTRY: 'us-docker.pkg.dev'
  DOCKER_REPO: 'us-docker.pkg.dev/pmap-i-b0/ci-images'
  DOCKER_TAG: '${{ github.sha }}'

  TF_MODULE_DIR: './terraform/modules/pmap-service'
  MAPPING_TF_MODULE_DIR: 'mapping_tf_module'
  POLICY_TF_MODULE_DIR: 'policy_tf_module'
  INTEG_TEST_PROJECT_ID: 'pmap-i-b0'
  INTEG_TEST_BUCKET_ID: 'pmap-ci-e9fae9'
  INTEG_TEST_BIGQUERY_DATASET_ID: 'pmap_fb09'
  INTEG_TEST_MAPPING_TABLE_ID: 'mapping'
  INTEG_TEST_MAPPING_FAILURE_TABLE_ID: 'mapping-failure'
  INTEG_TEST_POLICY_TABLE_ID: 'policy'
  INTEG_TEST_RUN_SERVICE_ACCOUNT: 'run-pmap-fb09@pmap-i-b0.iam.gserviceaccount.com'
  INTEG_TEST_OIDC_SERVICE_ACCOUNT: 'pmap-oidc-fb09@pmap-i-b0.iam.gserviceaccount.com'
  INTEG_TEST_MAPPING_UPSTREAM_TOPIC: 'mapping-gcs'
  INTEG_TEST_MAPPING_DOWNSTREAM_TOPIC: 'mapping-bigquery'
  INTEG_TEST_MAPPING_DOWNSTREAM_FAILURE_TOPIC: 'mapping-failure-bigquery'
  INTEG_TEST_POLICY_UPSTREAM_TOPIC: 'policy-gcs'
  INTEG_TEST_POLICY_DOWNSTREAM_TOPIC: 'policy-bigquery'
  INTEG_TEST_STATIC_GCS_BUCKET: 'pmap-static-ci-bucket-9d89'
  INTEG_TEST_STATIC_AR_REPO: 'pmap-static-ci-artifact-registry-repo-9d89'
  # Folder deployments > pmap > integration
  INTEG_TEST_MAPPING_DEFAULT_RESOURCE_SCOPE: 'folders/46289608867'

concurrency:
  group: '${{ github.workflow }}-${{ github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  # Linting jobs - go, terraform, yaml.
  go_lint:
    uses: 'abcxyz/pkg/.github/workflows/go-lint.yml@main' # ratchet:exclude

  terraform_lint:
    uses: 'abcxyz/pkg/.github/workflows/terraform-lint.yml@main' # ratchet:exclude
    with:
      directory: 'terraform'
      terraform_version: '1.3'

  yaml_lint:
    uses: 'abcxyz/pkg/.github/workflows/yaml-lint.yml@main' # ratchet:exclude

  # Unit tests - go
  go_test:
    uses: 'abcxyz/pkg/.github/workflows/go-test.yml@main' # ratchet:exclude

  # lint_and_unit is a virtual job that is used as dependencies for later jobs.
  lint_and_unit:
    runs-on: 'ubuntu-latest'
    needs:
      - 'go_lint'
      - 'terraform_lint'
      - 'yaml_lint'
      - 'go_test'
    steps:
      - run: 'echo prechecks complete'

  # Build pmap services and push to artifact registry
  build:
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
      id-token: 'write'
    needs: ['lint_and_unit']
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11' # ratchet:actions/checkout@v4
      - name: 'Setup Go'
        uses: 'actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491' # ratchet:actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@55bd3a7c6e2ae7cf1877fd1ccb9d54c0503c457c' # ratchet:google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT }}'
          token_format: 'access_token'
      - name: 'Authenticate to Artifact Registry'
        uses: 'docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d' # ratchet:docker/login-action@v3
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.DOCKER_REGISTRY }}'
      # goreleaser requires a tag to publish images to container registry.
      # We create a local tag to make it happy.
      - run: |-
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git tag -f `date "+%Y%m%d%H%M%S"`
      - name: 'Build the service containers and push to the registry with goreleaser'
        uses: 'goreleaser/goreleaser-action@7ec5c2b0c6cdda6e8bbb49444bc797dd33d74dd8' # ratchet:goreleaser/goreleaser-action@v5
        with:
          version: 'v1.16.1' # Manually pinned
          args: 'release -f .goreleaser.docker.yaml --clean'

  # Deploy integration test infrastructure
  set_up_integration_infra:
    runs-on: 'ubuntu-latest'
    needs: ['build']
    permissions:
      contents: 'read'
      id-token: 'write'
    outputs:
      INTEG_TEST_OBJECT_PREFIX_OUTPUT: '${{ steps.generate_object_prefix.outputs.INTEG_TEST_OBJECT_PREFIX_OUTPUT }}'
    steps:
      - uses: 'actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11' # ratchet:actions/checkout@v4
      - id: 'auth'
        uses: 'google-github-actions/auth@55bd3a7c6e2ae7cf1877fd1ccb9d54c0503c457c' # ratchet:google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT }}'
          token_format: 'access_token'
      # TODO: Workload Identity doesn't work with GCS Provider.
      # https://github.com/google-github-actions/auth/issues/89
      - name: 'Workaround Terraform issue'
        shell: 'bash'
        run: |-
          echo "GOOGLE_OAUTH_ACCESS_TOKEN=${{ steps.auth.outputs.access_token }}" >> $GITHUB_ENV
      - uses: 'hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36' # ratchet:hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      # Generate a unique object ID prefix to mark the files in GCS and BigQuery so that we run multiple
      # CI simultaneously.
      - name: 'Generate object prefix'
        id: 'generate_object_prefix'
        run: |
          OBJECT_PREFIX=${RANDOM}
          echo "INTEG_TEST_OBJECT_PREFIX=${OBJECT_PREFIX}" >> "$GITHUB_ENV"
          echo "INTEG_TEST_OBJECT_PREFIX_OUTPUT=${OBJECT_PREFIX}" >> "$GITHUB_OUTPUT"
      - name: 'Write mapping tfvars file'
        run: |-
          mkdir -p '${{ runner.temp }}/${{ env.MAPPING_TF_MODULE_DIR }}'
          VAR_FILE='${{ runner.temp }}/${{ env.MAPPING_TF_MODULE_DIR }}/mapping_ci.tfvars'

          touch ${VAR_FILE}
          echo project_id=\"${{ env.INTEG_TEST_PROJECT_ID }}\" >> ${VAR_FILE};
          echo service_name=\"mapping\" >> ${VAR_FILE};
          echo pmap_container_image=\"${{ env.DOCKER_REPO }}/pmap:${{ env.DOCKER_TAG }}-amd64\" >> ${VAR_FILE};
          echo pmap_args=[\"mapping\",\"server\"] >> ${VAR_FILE};
          echo upstream_topic=\"${{ env.INTEG_TEST_MAPPING_UPSTREAM_TOPIC }}\" >> ${VAR_FILE};
          echo downstream_topic=\"${{ env.INTEG_TEST_MAPPING_DOWNSTREAM_TOPIC }}\" >> ${VAR_FILE};
          echo downstream_failure_topic=\"${{ env.INTEG_TEST_MAPPING_DOWNSTREAM_FAILURE_TOPIC }}\" >> ${VAR_FILE};
          echo pmap_service_account=\"${{ env.INTEG_TEST_RUN_SERVICE_ACCOUNT }}\" >> ${VAR_FILE};
          echo oidc_service_account=\"${{ env.INTEG_TEST_OIDC_SERVICE_ACCOUNT }}\" >> ${VAR_FILE};
          echo gcs_events_filter=\"hasPrefix\(attributes.objectId, \\\"mapping/${INTEG_TEST_OBJECT_PREFIX}\\\"\)\">> ${VAR_FILE};
          echo pmap_specific_envvars={PMAP_MAPPING_DEFAULT_RESOURCE_SCOPE=\"projects/${{ env.INTEG_TEST_PROJECT_ID}}\"} >> ${VAR_FILE}
          echo enable_dead_lettering=false >> ${VAR_FILE};

          cat ${VAR_FILE};
          echo "MAPPING_TF_VAR_FILE=${VAR_FILE}" >> $GITHUB_ENV;
      - name: 'Write policy tfvars file'
        run: |-
          mkdir -p '${{ runner.temp }}/${{ env.POLICY_TF_MODULE_DIR }}'
          VAR_FILE='${{ runner.temp }}/${{ env.POLICY_TF_MODULE_DIR }}/policy_ci.tfvars'

          touch ${VAR_FILE}
          echo project_id=\"${{ env.INTEG_TEST_PROJECT_ID }}\" >> ${VAR_FILE};
          echo service_name=\"policy\" >> ${VAR_FILE};
          echo pmap_container_image=\"${{ env.DOCKER_REPO }}/pmap:${{ env.DOCKER_TAG }}-amd64\" >> ${VAR_FILE};
          echo pmap_args=[\"policy\",\"server\"] >> ${VAR_FILE};
          echo upstream_topic=\"${{ env.INTEG_TEST_POLICY_UPSTREAM_TOPIC }}\" >> ${VAR_FILE};
          echo downstream_topic=\"${{ env.INTEG_TEST_POLICY_DOWNSTREAM_TOPIC }}\" >> ${VAR_FILE};
          echo pmap_service_account=\"${{ env.INTEG_TEST_RUN_SERVICE_ACCOUNT }}\" >> ${VAR_FILE};
          echo oidc_service_account=\"${{ env.INTEG_TEST_OIDC_SERVICE_ACCOUNT }}\" >> ${VAR_FILE};
          echo gcs_events_filter=\"hasPrefix\(attributes.objectId, \\\"policy/${INTEG_TEST_OBJECT_PREFIX}\\\"\)\">> ${VAR_FILE};
          echo enable_dead_lettering=false >> ${VAR_FILE};

          cat ${VAR_FILE};
          echo "POLICY_TF_VAR_FILE=${VAR_FILE}" >> $GITHUB_ENV;
      - name: 'Init the terraform infrastructure for mapping'
        run: |-
          cp -r ${{ env.TF_MODULE_DIR }}/* ${{ runner.temp }}/${{ env.MAPPING_TF_MODULE_DIR }}
          terraform -chdir=${{ runner.temp }}/${{ env.MAPPING_TF_MODULE_DIR }} init
      - name: 'Apply the infrastructure updates for mapping'
        id: 'tf_apply_mapping'
        run: |-
          terraform -chdir=${{ runner.temp }}/${{ env.MAPPING_TF_MODULE_DIR }} apply -auto-approve -var-file=${{ env.MAPPING_TF_VAR_FILE }};
      - name: 'Init the terraform infrastructure for policy'
        run: |-
          cp -r ${{ env.TF_MODULE_DIR }}/* ${{ runner.temp }}/${{ env.POLICY_TF_MODULE_DIR }}
          terraform -chdir=${{ runner.temp }}/${{ env.POLICY_TF_MODULE_DIR }} init
      - name: 'Apply the infrastructure updates for policy'
        id: 'tf_apply_policy'
        run: |-
          terraform -chdir=${{ runner.temp }}/${{ env.POLICY_TF_MODULE_DIR }} apply -auto-approve -var-file=${{ env.POLICY_TF_VAR_FILE }};
      - name: 'Upload terraform files for mapping'
        uses: 'actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3' # ratchet:actions/upload-artifact@v4.3.1
        if: '${{ always() }}'
        with:
          name: 'terraform-mapping-files-${{ github.run_id}}'
          path: |
            ${{ env.MAPPING_TF_VAR_FILE }}
            ${{ runner.temp }}/${{ env.MAPPING_TF_MODULE_DIR }}/terraform.tfstate
            ${{ runner.temp }}/${{ env.MAPPING_TF_MODULE_DIR }}/terraform.tfstate.backup

          retention-days: 1
      - name: 'Upload terraform files for policy'
        uses: 'actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3' # ratchet:actions/upload-artifact@v4.3.1
        if: '${{ always() }}'
        with:
          name: 'terraform-policy-files-${{ github.run_id}}'
          path: |
            ${{ env.POLICY_TF_VAR_FILE }}
            ${{ runner.temp }}/${{ env.POLICY_TF_MODULE_DIR }}/terraform.tfstate
            ${{ runner.temp }}/${{ env.POLICY_TF_MODULE_DIR }}/terraform.tfstate.backup
          retention-days: 1

  # Call reusable workflow
  call_mapping_reusable_workflow:
    needs: ['set_up_integration_infra']
    uses: './.github/workflows/snapshot-file-copy.yml'
    with:
      workload_identity_provider: 'projects/125781045617/locations/global/workloadIdentityPools/github-automation/providers/pmap-ci-i'
      service_account: 'github-automation-bot@gha-pmap-ci-i-f49bd9.iam.gserviceaccount.com'
      destination_prefix: 'pmap-ci-e9fae9/mapping/${{ needs.set_up_integration_infra.outputs.INTEG_TEST_OBJECT_PREFIX_OUTPUT }}'
      path: 'test/e2e/testdata/fakedata/mapping'

  call_policy_reusable_workflow:
    needs: ['set_up_integration_infra']
    uses: './.github/workflows/snapshot-file-copy.yml'
    with:
      workload_identity_provider: 'projects/125781045617/locations/global/workloadIdentityPools/github-automation/providers/pmap-ci-i'
      service_account: 'github-automation-bot@gha-pmap-ci-i-f49bd9.iam.gserviceaccount.com'
      destination_prefix: 'pmap-ci-e9fae9/policy/${{ needs.set_up_integration_infra.outputs.INTEG_TEST_OBJECT_PREFIX_OUTPUT }}'
      path: 'test/e2e/testdata/fakedata/policy'

  # Run integration tests
  run_integ_test:
    runs-on: 'ubuntu-latest'
    needs: ['set_up_integration_infra', 'call_mapping_reusable_workflow', 'call_policy_reusable_workflow']
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: 'actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11' # ratchet:actions/checkout@v4

      - uses: 'actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491' # ratchet:actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - id: 'auth'
        uses: 'google-github-actions/auth@55bd3a7c6e2ae7cf1877fd1ccb9d54c0503c457c' # ratchet:google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT }}'
          token_format: 'access_token'
      # Write the prefix into GITHUB_ENV which will be used in integration test as a prefix of the
      # uploaded file's path.
      - name: 'Write object prefix'
        run: |
          echo "INTEG_TEST_OBJECT_PREFIX=${{ needs.set_up_integration_infra.outputs.INTEG_TEST_OBJECT_PREFIX_OUTPUT }}" >> $GITHUB_ENV
      # Write workflow id to GITHUB_ENV. This variable works as the unique identifier
      # of the files uploaded by reusable workflow.
      - name: 'write workflow id to env'
        id: 'write_workflow_id'
        run: |
          echo "WORKFLOW_RUN_ID=${{ github.run_id }}" >> $GITHUB_ENV
      - name: 'Run tests'
        env:
          TEST_INTEGRATION: 'true'
        run: |-
          go test ./test/integration \
            -timeout=15m

  # Clean up integration test infra
  clean_up_integration_infra:
    runs-on: 'ubuntu-latest'
    if: '${{ always() }}'
    needs: ['set_up_integration_infra', 'run_integ_test']
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
      MAPPING_TF_VAR_FILE: 'mapping_tf_module/mapping_ci.tfvars'
      POLICY_TF_VAR_FILE: 'policy_tf_module/policy_ci.tfvars'
    steps:
      - uses: 'actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11' # ratchet:actions/checkout@v4
      - id: 'auth'
        uses: 'google-github-actions/auth@55bd3a7c6e2ae7cf1877fd1ccb9d54c0503c457c' # ratchet:google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT }}'
          token_format: 'access_token'
      # TODO: Workload Identity doesn't work with GCS Provider.
      # https://github.com/google-github-actions/auth/issues/89
      - name: 'Workaround Terraform issue'
        shell: 'bash'
        run: |-
          echo "GOOGLE_OAUTH_ACCESS_TOKEN=${{ steps.auth.outputs.access_token }}" >> $GITHUB_ENV
      - name: 'Init the mapping terraform infrastructure for clean up'
        if: '${{ always() }}'
        run: |-
          cp -r ${{ env.TF_MODULE_DIR }} ${{ runner.temp}}/${{ env.MAPPING_TF_MODULE_DIR }}
          terraform -chdir=${{ runner.temp}}/${{ env.MAPPING_TF_MODULE_DIR }} init
      - name: 'download artifact for mapping'
        if: '${{ always() }}'
        uses: 'actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427' # ratchet:actions/download-artifact@v4.1.4
        with:
          name: 'terraform-mapping-files-${{ github.run_id }}'
          path: '${{ runner.temp}}/${{ env.MAPPING_TF_MODULE_DIR }}'
      - name: 'Init the policy terraform infrastructure for clean up'
        if: '${{ always() }}'
        run: |-
          cp -r ${{ env.TF_MODULE_DIR }} ${{ runner.temp }}/${{ env.POLICY_TF_MODULE_DIR }}
          terraform -chdir=${{ runner.temp }}/${{ env.POLICY_TF_MODULE_DIR }} init
      - name: 'download artifact for policy'
        if: '${{ always() }}'
        uses: 'actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427' # ratchet:actions/download-artifact@v4.1.4
        with:
          name: 'terraform-policy-files-${{ github.run_id }}'
          path: '${{ runner.temp }}/${{ env.POLICY_TF_MODULE_DIR }}'
      - name: 'Cleanup the infrastructure for mapping'
        if: '${{ always() }}'
        run: |-
          terraform -chdir=${{ runner.temp}}/${{ env.MAPPING_TF_MODULE_DIR }} apply -destroy -auto-approve -var-file=${{ runner.temp }}/${{ env.MAPPING_TF_VAR_FILE }};
      - name: 'Cleanup the infrastructure for policy'
        if: '${{ always() }}'
        run: |-
          terraform -chdir=${{ runner.temp }}/${{ env.POLICY_TF_MODULE_DIR }} apply -destroy -auto-approve -var-file=${{ runner.temp }}/${{ env.POLICY_TF_VAR_FILE }};
